
// A VERY SIMPLE BUT POWERFUL RESPONSIVE GRID.
// ALL HAIL THE VERY SIMPLE BUT POWERFUL RESPONSIVE GRID!

// Base clearfix
// Makes sure the grid works as intended when
// floating things inside the cages and columns.
// %clearfix:after, // not really necessary
%clearfix:after {
  display: block;
  height: 0;
  width: 100%;
  content: " ";
  color: transparent;
  visibility: hidden;
  clear: both;
}


// Container for cages and cols
// this one is to be used in HTML nodes that are direct children of body
// as the topmost layout distribution tool. It centers whatever it has inside
// and takes care of the base fluid width.
.container {
  @extend %clearfix;
  width: 100%;
  max-width: $large-threshold;
  margin: auto;
  padding: 0 ($gutter / 2);
  // border: 1px solid red; // debugging
}

// A narrower container lets you build smaller layouts,
// say, modal dialogs, pop overs and the like.
.container-narrow {
  @extend %clearfix;
  width: 100%;
  max-width: $small-threshold;
  margin: auto;
  padding: 0 ($gutter / 2);
  // border: 1px solid red; // debugging
}


// base cage
// Cages work as a base for grids, but they don't have gutters, so beware
// you should use these for mayor layout only, don't use them to encase your
// actual content
%cage {
  // border: 1px solid red; // debugging
  @extend %clearfix;
  clear: none;
  float: left;
  position: relative;
}

// base col
// Cols work as a normal content-encasing responsive column, use them to
// encase your actual content. These come with gutter support so that can be
// configured above with the $gutter variable.
%col {
  @extend %clearfix;
  // border: 1px solid green; // debugging
  clear: none;
  float: left;
  padding: ($gutter / 2);
  position: relative;
}


// The actual grid
// This defines the actual responsive grid.
// this works as follows:
// + The base classes are defined from smallest to biggest so
//   the smallest can be overridden by bigger ones, while still working if
//   the bigger classes are not used.
// + The responsive @media queries are below the base classes just to
//   make sure we don't mess up with their hierarchy for appearing earlier.
// This ordering should be kept unchanged to avoid hierarchy issues.


// Tiny cages and cols
// Defined here so they can be overridden by later classes
// when adding more thresholds:
//    + put smaller ones before this
//    + and bigger ones after this
@for $colspan from 1 through $manycols {

  .cage-tiny-#{$colspan} {
    @extend %cage;
    width: $colwidth * $colspan;
  }

  .col-tiny-#{$colspan} {
    @extend %col;
    width: $colwidth * $colspan;

    @if $debug {
      .debug {
        background: rgba(#0f8, .16);
      }
    }
  }

}


// Small cages and cols
// Defined here so they can be overridden by later classes
// when adding more thresholds:
//    + put smaller ones before this
//    + and bigger ones after this
@for $colspan from 1 through $manycols {

  .cage-small-#{$colspan} {
    @extend %cage;
    width: $colwidth * $colspan;
  }

  .col-small-#{$colspan} {
    @extend %col;
    width: $colwidth * $colspan;

    @if $debug {
      .debug {
        background: rgba(#0f8, .16);
      }
    }
  }

}


// Medium cages and cols
// Defined here so they can be overridden by later classes
// when adding more thresholds:
//    + put smaller ones before this
//    + and bigger ones after this
@for $colspan from 1 through $manycols {

  .cage-medium-#{$colspan} {
    @extend %cage;
    width: $colwidth * $colspan;
  }

  .col-medium-#{$colspan} {
    @extend %col;
    width: $colwidth * $colspan;

    @if $debug {
      .debug {
        background: rgba(#08f, .16);
      }
    }
  }

}


// Large cages and cols
// Defined here so they can override earlier classes
// You probably won't want to add any larger grids, unless strictly necessary
// when adding more thresholds:
//    + put smaller ones before this
//    + and bigger ones after this
@for $colspan from 1 through $manycols {

  .cage-large-#{$colspan} {
    @extend %cage;
    width: $colwidth * $colspan;
  }

  .col-large-#{$colspan} {
    @extend %col;
    width: $colwidth * $colspan;

    @if $debug {
      .debug {
        background: rgba(#f00, .12);
      }
    }
  }

}


// The Responsive Media Queries
// These come defined in inverse order from the base classes, with the biggest
// classes on top and the smalles at the bottom; this is so the smaller classes
// have higher priority than the bigger ones, because we want the site's layout
// to actually change when smaller screen/browser sizes are hit.
// The large classes do not need media queries because they are to be used
// as defaults from wich the responsive design will fold.


// Medium cages and cols
// These should be able to override the large classes
@media screen and (#{$threshold-property}: $medium-threshold) {

  @for $colspan from 1 through $manycols {
    .cage-medium-#{$colspan},
    .col-medium-#{$colspan}, {
      width: $colwidth * $colspan;

      @if $debug {
        .debug {
          background: rgba(#08f, .16);
        }
      }
    }
  }

}

// Small cages and cols
// These should be able to override the medium classes
@media screen and (#{$threshold-property}: $small-threshold) {

  @for $colspan from 1 through $manycols {

    .cage-small-#{$colspan},
    .col-small-#{$colspan}, {
      width: $colwidth * $colspan;

      @if $debug {
        .debug {
          background: rgba(#0f8, .16);
        }
      }
    }

  }

}

// Small cages and cols
// These should be able to override the medium classes
@media screen and (#{$threshold-property}: $tiny-threshold) {

  @for $colspan from 1 through $manycols {

    .cage-tiny-#{$colspan},
    .col-tiny-#{$colspan}, {
      width: $colwidth * $colspan;

      @if $debug {
        .debug {
          background: rgba(#0f8, .16);
        }
      }
    }

  }

}


// You probably won't want to add more breakpoints, this grid has you covered
// with three of them, but if you must, add them here.


/////////////////////////////////////////////////////////
// Utility styles that make sure your layout is pretty //
/////////////////////////////////////////////////////////

// This avoids your images from overlapping contiguous columns or cages.
// This is somewhat nasty, I know; I like to think I did it for your own good.
// If you absolutely despise this, you're free to disable it.
// No hard feelings...
// Really...
// Or you could leave it... or whatever... I don't care...
@if $constrain-images {

  [class*='col-'] img:not(.force-style-properties),
  [class*='cage-'] img:not(.force-style-properties) {
    // The !important directive is here for a very good reason
    // If you don't like this and want to force your style="width:X;" and/or
    // width="X" properties then use .force-style-properties in your img nodes
    max-width: 100% !important;
    height: auto !important;
  }

}
